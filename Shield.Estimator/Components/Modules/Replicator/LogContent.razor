@*LogContent.razor*@

<MudText Style="display: flex; flex-direction: column; align-items: flex-start;" Class="w-100">
    <MudButton OnClick="OnExpandCollapseClick"> Лог событий: @(_expanded ? "▲" : "▼")</MudButton>
    <MudCollapse Style="width: 100%; max-height: 150px; overflow-y: auto;" Expanded="_expanded">
        <MudText Typo="Typo.body2" Style="white-space: pre-wrap; display: block;">
            @if (!string.IsNullOrEmpty(logContent))
            {
                @logContent
            }
            else if (_expanded)
            {
                <MudProgressCircular Color="@Color.Surface" Size="Size.Small" Indeterminate="true" />
            }
        </MudText>
    </MudCollapse>
</MudText>

@code {

    bool _expanded = false;
    private string? logContent = null;

    private async void OnExpandCollapseClick()
    {
        logContent = null;
        StateHasChanged();

        _expanded = !_expanded;
        logContent = _expanded ? await ReadLogContent() : null;
        if (_expanded == true && string.IsNullOrEmpty(logContent))
        {
            logContent = "Пусто";
        }

    }
    private async Task<string> ReadLogContent()
    {
        try
        {
            var logFilePath = Path.Combine(Path.Combine(AppContext.BaseDirectory, "Logs/replicator.log"));
            //var logFilePath = @".\Logs\ReplicatorLog.txt"; //корневая директория проекта
            if (File.Exists(logFilePath))
            {
                var logLines = await File.ReadAllLinesAsync(logFilePath);
                Array.Reverse(logLines); // Переворачиваем массив строк
                return string.Join(Environment.NewLine, logLines);
            }
            else
            {
                return "Лог-файл не найден.";
            }
        }
        catch (Exception ex)
        {
            return $"Ошибка чтения лог-файла: {ex.Message}";
        }
    }
}