@page "/translate"

@using Shield.Estimator.Business.Services

@inject KoboldService kobold
@rendermode InteractiveServer

<PageTitle>📑 Translator</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Перевод текста 🈂 ~ ㊙</MudText>
    <MudDivider />
    <br />
    <MudText Class="mb-3" Typo="Typo.body1">Мультиязычный переводчик на русский язык</MudText>
    <MudDivider />
    <br />

    <MudCard Style="height:110px; box-shadow:none;">

        <MudGrid>
            <MudItem xs="12" sm="11">
                <MudTextField @bind-Value="textInput" Label="Введите текст..." Lines="7" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="1" Style="display:flex; flex-direction:column; align-self: center;">
                @if (!isLoading)
                {
                    <MudIconButton Style="width:64px;" OnClick="@TranslateAsync" Size="Size.Large" Icon="@Icons.Material.Filled.PlayArrow"></MudIconButton>
                }
                else
                {
                    <MudProgressCircular Color="Color.Default" Size="Size.Large" Indeterminate="true" />
                }
            </MudItem>
        </MudGrid>

        @if (isSuccess)
        {
            <div class="mt-4">
                <MudText Typo="Typo.body1" Class="font-weight-bold">Исходный текст:</MudText>
                <MudText Typo="Typo.body2">@prompt</MudText>
                <MudText Typo="Typo.body1" Class="font-weight-bold mt-3">Перевод:</MudText>
                <MudText Typo="Typo.body2" Style="white-space: pre-wrap;">@translatedText</MudText>
            </div>
        }
    </MudCard>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudContainer>

@code {
    [Inject]
    public IConfiguration conf { get; set; }

    private string textInput = string.Empty;
    private string prompt = string.Empty;
    private string translatedText = string.Empty;
    private bool isLoading = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;
    //private CancellationTokenSource cts;

    private async Task TranslateAsync()
    {
        if (!string.IsNullOrWhiteSpace(textInput))
        {
            if (string.IsNullOrWhiteSpace(textInput))
            {
                errorMessage = "Пожалуйста, введите текст для перевода.";
                isSuccess = false;
                return;
            }

            //cts?.Cancel();
            //cts = new CancellationTokenSource();
            errorMessage = string.Empty;
            isSuccess = false;
            isLoading = true;
            prompt = textInput;

            try
            {
                var pretext = conf["PretextTranslate"] ?? "";
                translatedText = await kobold.GenerateTextAsync($"{pretext}{textInput}"/*, cts.Token*/);
                isSuccess = true;
            }
            catch (OperationCanceledException)
            {
                // Запрос был отменен
            }
            catch (Exception ex)
            {
                errorMessage = $"Ошибка при переводе: {ex.Message}";
                isSuccess = false;
            }
            finally
            {
                isLoading = false;
                textInput = string.Empty;
            }
        }
    }
}