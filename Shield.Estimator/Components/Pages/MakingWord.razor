@page "/word-document"
@rendermode InteractiveServer

@using Shield.Estimator.Shared.Components.Modules._Shared
@using Shield.Estimator.Shared.Components.Modules.MakingWord
@using Shield.Estimator.Shared.Components.EntityFrameworkCore

@using System.Text
@using Oracle.ManagedDataAccess.Client
@using Npgsql

@inject IJSRuntime JsRuntime
@inject IDbContextFactory DbContextFactory

<PageTitle>🖍 Create Word</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5">Оформление АЖ => 🖍 + 📃</MudText>
    <MudDivider />
    <br />

    @if (SettingsDbList != null)
    {
        <ConnectionSettings colorButton="@colorTag" OnSettingsChanged="OnSettingsChanged" SettingsDbList="@SettingsDbList" FileSettingsDb="@FileSettingsDb" />
    }

    <MudText Style="display: flex; justify-content: start;">
        <MudText Style="display: flex; align-items: center;">
            <MudText Style="width: 210px;">Введите номер поля <b>Ключ</b></MudText>
            <MudNumericField @bind-Value="Id" Label="Ключ записи" Variant="Variant.Outlined" Min="0" Step="1" Style="height: 35px; width: 120px;" Class="ml-3" />
        </MudText>

        <MudText Style="display: flex; align-items: center; margin-left: 30px; width:100%;">
            <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled" Color="@colorTag" OnClick="@(async () => await QueryRecordById(Id))" Size="Size.Large" />
            @if (speechData != null && speechData.Count > 0 && speechData.FirstOrDefault().Id == Id)
            {
                <MudButton OnClick="@(e => GenerateWord())" Variant="Variant.Filled" Color="@colorTag" Class="ml-3 mr-3">💾</MudButton>
                @*<Diarization ColorTag="@colorTag" RecordType="@speechData?.FirstOrDefault()?.RecordType" AudioDataLeft="@speechData?.FirstOrDefault()?.AudioF" AudioDataRight="@speechData?.FirstOrDefault()?.AudioR" />*@
            }
            <MudText Color="@colorTag">&emsp; @message</MudText>
        </MudText>
    </MudText>



    @if (speechData != null && speechData.Count > 0 && speechData.FirstOrDefault().Id == Id)
    {
        <MudDivider />
        <WaveFormPlayer AutoPlay="false" FileName="@fileNameForSaveAudioViaPlayer" ColorTag="@colorTag" RecordType="@speechData?.FirstOrDefault()?.RecordType" AudioDataLeft="@speechData?.FirstOrDefault()?.AudioF" AudioDataRight="@speechData?.FirstOrDefault()?.AudioR" />
        <br />

        <MudTable Style="min-width: 525px;" Items="@speechData" Dense="true" Hover="true" Bordered="true" Striped="true">
            <HeaderContent >
                @foreach (var header in ColumnHeaders)
                {
                    <MudTh Style="line-height: 0.9rem !important;">@header</MudTh>
                }
            </HeaderContent>
            <RowTemplate >
                <MudTd >@context.Id</MudTd>
                <MudTd>@context.Datetime</MudTd>
                <MudTd>@context.Duration.ToString()</MudTd>
                <MudTd>@context.Talker</MudTd>
                <MudTd>@context.Usernumber</MudTd>
                <MudTd>
                    @switch (context.Calltype)
                    {
                        case 1: @:Исходящий
                            break;
                        case 0: @:Входящий
                            break;
                        default: @:Неизвестно
                            break;
                    }
                </MudTd>
                <MudTd>@context.Cid</MudTd>
                <MudTd>@context.Lac</MudTd>
                <MudTd>@context.Basestation</MudTd>
                <MudTd>@context.Belong</MudTd>
                <MudTd>@context.Sourcename</MudTd>
                <MudTd>@context.Deviceid</MudTd>
                <MudTd>@context.EventCode</MudTd>
            </RowTemplate>
        </MudTable>

        try
        {
            byte[]? commentByte = speechData?.FirstOrDefault()?.Comment;

            string decodedComment = commentByte != null ? Encoding.GetEncoding("windows-1251").GetString(commentByte) : "Комментарий отсутствует.";
            <br />
            <pre style="white-space: pre-wrap">@decodedComment.Trim().Replace("\n\n", "\n")</pre> 
        }
        catch (Exception ex)
        {
            <p>Ошибка декодирования комментария: @ex.Message</p>
        }
    }
    else if (IsSkeleton)
    {
        <Skeleton />
    }

</MudContainer>

@code {

    string fileNameForSaveAudioViaPlayer = "";
    bool IsSkeleton = false;

    MudBlazor.Color colorTag = Color.Success;

    private string message = ""; // Сообщение об ошибке
    private List<SpeechData> speechData = null;

    private long? Id = 0;
    List<string> ColumnHeaders = new() { "Ключ", "Дата/время", "Длительность", "Собеседник", "Пользовательский номер", "Тип вызова", "CID", "LAC", "Базовая станция", "Принадлежность (язык оригинала)", "Имя источника (оператор)", "Устройство", "Кодек" };

    private List<SettingsDb> SettingsDbList = null;
    private SettingsDb SettingsDb = null;
    private string FileSettingsDb = Path.Combine(AppContext.BaseDirectory, "settingsMakingWord.json");


    protected override async Task OnInitializedAsync()
    {
        // dotnet add package System.Text.Encoding.CodePages // Регистрация провайдера кодировок
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
        speechData = new();
        SettingsDbList = await SimpleJson<SettingsDb>.LoadItemsAsync(FileSettingsDb);
        SettingsDb = SettingsDbList.FirstOrDefault(x => x.Selected == true);
        StateHasChanged();
    }

    private async Task OnSettingsChanged()
    {
        SettingsDbList = await SimpleJson<SettingsDb>.LoadItemsAsync(FileSettingsDb);
        SettingsDb = SettingsDbList.FirstOrDefault(x => x.Selected == true);
        Console.WriteLine("Настройки подключения к БД для создания Word изменились");
    }

    private async Task QueryRecordById(long? id)
    {
        IsSkeleton = true;

        try 
        {
            string conStringDBA = SelectDb.ConStringDBA(SettingsDb);
            using var context = await DbContextFactory.CreateDbContext(SettingsDb.DbType, conStringDBA, SettingsDb.Scheme);

            if(!context.Database.CanConnect())
            {
                message = $"\nНе удалось установить подключение к БД, проверьте настройки";
                Console.WriteLine($"Не удалось установить подключение к БД, проверьте настройки");
                return;
            }

            speechData = await DbQuery.GetSpeechDataByIdAsync(id, context);

            if (speechData != null)
            {
                var ItemByKey = speechData.FirstOrDefault();
                string durationString = ItemByKey.Duration.ToString();

                fileNameForSaveAudioViaPlayer = $"" + ItemByKey.Datetime.ToString() + "_" + durationString + "_" + ItemByKey.Sourcename + "_" + ItemByKey.Usernumber + "_" + ItemByKey.Talker + "_" + ItemByKey.Lac + "_" + ItemByKey.Cid + "_" + ItemByKey.Basestation + ".wav";
                Console.WriteLine("Id = " + id);
                message = "";
            }
            else
            {
                message = $"\nКлюч записи №{id} не существует ";
                Console.WriteLine($"Ключ записи не существует Id: {id}");
            }
        }
        catch (OracleException ex)
        {
            message = $"Ошибка Oracle: {ex.Message}, проверьте имя Схемы";
            Console.WriteLine($"Ошибка Oracle: {ex.Message}");
        }
        catch (NpgsqlException ex)
        {
            message = $"Ошибка Postgres: {ex.Message}, проверьте имя Схемы";
            Console.WriteLine($"Ошибка Postgres: {ex.Message}");
        }
        catch (Exception ex)
        {
            message = $"Общая ошибка: {ex.Message}" + $"Возможно, ключ записи №{id} не существует ";
            Console.WriteLine($"Общая ошибка: {ex.Message}");
        }
        finally
        {
            IsSkeleton = false;
            StateHasChanged();
        }
    }

    private async Task GenerateWord()
    {
        if (speechData.FirstOrDefault() is { } data)
        {
            using var stream = SpireDoc.GenerateWord(data, Path.Combine(AppContext.BaseDirectory, "pattern.docx"));
            var base64 = Convert.ToBase64String(stream.ToArray());
            await JsRuntime.InvokeVoidAsync("downloadFile", "Document.docx", base64);
        }
    }

}
